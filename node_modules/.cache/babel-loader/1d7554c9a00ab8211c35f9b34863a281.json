{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react_study\\\\hooks-tutorial\\\\src\\\\Info.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  return { ...state,\n    [action.name]: action.value\n  };\n}\n\nconst Info = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    name: '',\n    nickname: ''\n  });\n  const [name, nickname] = state;\n\n  const onChange = e => {\n    dispatch(e.target);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"name\",\n        value: name,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"nickname\",\n        value: nickname,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\uC774\\uB984:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), \" \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\uB2C9\\uB124\\uC784:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), \" \", nickname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Info, \"hS4aBwnIIvA7L+qBfUzkiOTBmHQ=\");\n\n_c = Info;\nexport default Info; // 여러개의 useState\n// import React, { useState, useEffect } from 'react';\n// const Info = () => {\n//     const [name, setName] = useState('');\n//     const [nickname, setNickname] = useState('');\n//     useEffect(() => {\n//         console.log('effect');\n//         console.log(name);\n//         // 컴포넌트가 업데이트되기 직전에 작업을 수행하고 싶을때 뒷정리함수실행(cleanup)\n//         return () => {\n//             console.log('cleanup');\n//             console.log(name);\n//         };\n//     //1.화면이 렌더링 될때만 이벤트를 실행 하고 싶을 때에는 두번째 파라미터에 빈 배열넣기\n//     //2.특정값이 업데이트 될 때만 실행하고 싶을 때 배열에 해당값넣기\n//     }, []);\n//     // 이름변경하기\n//     const onChangeName = e => {\n//         //이름의 값을 인풋의 val로 변경함을 의미\n//         setName(e.target.value);\n//     }\n//     //닉네임 변경하기\n//     const onChangeNickname = e => {\n//         //닉네임의 값을 인풋의 val로 변경함을 의미\n//         setNickname(e.target.value);\n//     }\n//     return (\n//         <div>\n//             <div>\n//                 <input value={name} onChange={onChangeName}/>\n//                 <input value={nickname} onChange={onChangeNickname}/>\n//             </div>\n//             <div>\n//                 <div>\n//                     <b>이름:</b> {name}\n//                 </div>\n//                 <div>\n//                     <b>닉네임:</b> {nickname}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"sources":["C:/Users/User/Desktop/react_study/hooks-tutorial/src/Info.js"],"names":["React","useReducer","reducer","state","action","name","value","Info","dispatch","nickname","onChange","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5B,SAAO,EACH,GAAGD,KADA;AAEH,KAACC,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFnB,GAAP;AAIH;;AAED,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBP,UAAU,CAACC,OAAD,EAAU;AAC1CG,IAAAA,IAAI,EAAE,EADoC;AAE1CI,IAAAA,QAAQ,EAAE;AAFgC,GAAV,CAApC;AAIA,QAAM,CAACJ,IAAD,EAAOI,QAAP,IAAmBN,KAAzB;;AACA,QAAMO,QAAQ,GAAGC,CAAC,IAAI;AAClBH,IAAAA,QAAQ,CAACG,CAAC,CAACC,MAAH,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEP,IAA1B;AAAgC,QAAA,QAAQ,EAAEK;AAA1C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,KAAK,EAAED,QAA9B;AAAwC,QAAA,QAAQ,EAAEC;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,OACgBL,IADhB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,OACiBI,QADjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA1BD;;GAAMF,I;;KAAAA,I;AA4BN,eAAeA,IAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n    return {\r\n        ...state,\r\n        [action.name]: action.value\r\n    }\r\n}\r\n\r\nconst Info = () => {\r\n    const [state, dispatch] = useReducer(reducer, {\r\n        name: '',\r\n        nickname: ''\r\n    });\r\n    const [name, nickname] = state;\r\n    const onChange = e => {\r\n        dispatch(e.target);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input name=\"name\" value={name} onChange={onChange}/>\r\n                <input name=\"nickname\" value={nickname} onChange={onChange}/>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <b>이름:</b> {name}\r\n                </div>\r\n                <div>\r\n                    <b>닉네임:</b> {nickname}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Info;\r\n\r\n// 여러개의 useState\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const Info = () => {\r\n//     const [name, setName] = useState('');\r\n//     const [nickname, setNickname] = useState('');\r\n//     useEffect(() => {\r\n//         console.log('effect');\r\n//         console.log(name);\r\n//         // 컴포넌트가 업데이트되기 직전에 작업을 수행하고 싶을때 뒷정리함수실행(cleanup)\r\n//         return () => {\r\n//             console.log('cleanup');\r\n//             console.log(name);\r\n//         };\r\n//     //1.화면이 렌더링 될때만 이벤트를 실행 하고 싶을 때에는 두번째 파라미터에 빈 배열넣기\r\n//     //2.특정값이 업데이트 될 때만 실행하고 싶을 때 배열에 해당값넣기\r\n//     }, []);\r\n\r\n//     // 이름변경하기\r\n//     const onChangeName = e => {\r\n//         //이름의 값을 인풋의 val로 변경함을 의미\r\n//         setName(e.target.value);\r\n//     }\r\n\r\n//     //닉네임 변경하기\r\n//     const onChangeNickname = e => {\r\n//         //닉네임의 값을 인풋의 val로 변경함을 의미\r\n//         setNickname(e.target.value);\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <div>\r\n//                 <input value={name} onChange={onChangeName}/>\r\n//                 <input value={nickname} onChange={onChangeNickname}/>\r\n//             </div>\r\n//             <div>\r\n//                 <div>\r\n//                     <b>이름:</b> {name}\r\n//                 </div>\r\n//                 <div>\r\n//                     <b>닉네임:</b> {nickname}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };"]},"metadata":{},"sourceType":"module"}